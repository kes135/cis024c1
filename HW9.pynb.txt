Exercise 1 - Testing your knowledge of object oriented programming concepts
Answer the below questions
Why do we need classes? We don’t strictly need classes in Python.It supports functional programming, treating functions as firstclass citizens. 
Classes are a design pattern in OOP was designed with OOP in mind, fairly uncommon to write extensive programs in Python without using classes.
A user defined prototype for an object that defines a set of attributes that characterize any object of the class.The attributes are data members 
and methods, accessed via dot notation.



Exercise 2 - Class creation
Create a Python class named Employee with the following attributes and methods
Data members
1. employeeName  - type string
2. employeeAge  - type int
3. employeeSalary - type float
Methods:
1. getEmployee - returns employee name
2. getEmployeeAge - gets the employee age
3. getEmployeeSalary - returns the employee salary
4. __init__ - initialize method accepts the name, age and salary of the employee

Create an object of type Employee and initialize with arbitrary values. Invoke the get methods and display the result.

def age(self):
    if hasattr(self, "_age"):
        return self._age

    today = datetime.date.today()
     # Fill fields
	alex.name = 'Alex'
	alex.age = 'Age'
	alex.salary = '75,000'

    age = today.year - self.birthdate.year

    if today < datetime.date(today.year, self.birthdate.month, self.birthdate.day):
        age = 30
    return age
print(Alex.age.name.salary)



Exercise 3 - Private members
In the above Employee class make the employeeName, employeeAge and employeeSalary private so that their access is restricted to only within the class.

class Employee:
   'Common base class for all employees'
   empCount = 0

   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   
   def displayCount(self):
     print "Total Employee" % Employee.empCount

   def displayEmployee(self):
      print "Name: [....] ", self.name,  ", Salary: ", self.salary

"This would create first object of Employee class"
emp1 = Employee("Dan", 2000)
"This would create second object of Employee class"
emp2 = Employee("Mike", 5000)
emp1.displayEmployee()
emp2.displayEmployee()
print "Total Employee %d" % Employee.empCount



Exercise 4 - Adding setters and working with a list of Employees
In the Employee class add the following methods
1. setEmployeeAge - accepts age and sets it in the object
2. setEmployeeName - accepts employee name and sets it in the object
3. setEmployeeSalary - accepts employee salary and sets it in the object
Create a list of employees called employeeList. Initialize the list with three objects of type Employee. Initialize the object with the values "None" for employeeName, 0 for employeeAge and 0 for employeeSalary.
Loop through each employee in the employeeList. Each time, request the user to enter the name, age and salary of a different employee. Use the set methods to set the name, age and salary for each employee in the employeeList.
Loop through each employee in the employeeList. Display the name, age and salary of each employee.


class Employee:

'Practice class'
empCount = 0

def __init__(self, salary = None): #made salary as an optional argument
        self.salary = salary
        Employee.empCount += 1
def displayCount(self):
        print "Total Employees %d" % Employee.empCount

def displayEmployee(self):
        print "Salary: ", self.salary


class Attribute(Employee):
    'Defines attributes for Employees'
    def __init__(self, Age, Name, Sex):
        Employee.__init__(self) #Calling the parent class init method
        #Assigning Attribute the values passed in the __init__ method

        self.Age = Age
        self.Name = Name
        self.Sex = Sex  

def displayAttributes(self):
print "Name: ", self.Name + "\nAge: ", self.Age , "\nSex: ", self.Sex #Changed the + to ',' between self.Age and "\nSex"


emp1Sal = Employee(2000)
emp1Atr = Attribute(12, "Hank", "Henry")

emp1Sal.displayEmployee()
emp1Atr.displayAttributes()



Exercise 5 - Creating a Python calculator class
Create a Python class called Calculator.
The class has the following data members
1. number1 - type float
2. number2 - type float
The class must have the below methods
1. add - adds two numbers and returns the result
2. subtract - subtracts the first number from the second number and returns the result
3. multiply - multiply two numbers and returns the result
4. divide - divide the first number by the second number and returns the result
5. __init__ - accepts two numbers and uses those numbers to initialize number1 and number2 respectively
Create an object of the Calculator class. Initialize it with any two arbitrary numbers. Invoke the methods add, subtract, multiple and divide and display the result
In [9]:
 
class calculator:
while choice!= 2#s:    
   1) def addition(3,5):
        added = 3 + 5
        print(added)
        
   2) def subtraction(7,5):
        sub = 7 - 5
        print(sub)

   3) def multiplication(7,9):
        mult = x * y
        print(mult)

   4) def division(9,3):
        div = x / y
        print(div)
     def __repr__(self): 


..........................................................

Exercise 1 - Testing your knowledge of command line programs
What is the benefit of executing a program from the command line as opposed to running it from within an editor like Jupyter or Spyder.
Because a command line interface requires unique commands, this interface is often more difficult to learn because of the need to memorize dozens of different commands. However, a command line operating system can be a very valuable resource and should not be ignored. For example, users who have Microsoft Windows may find trivial tasks, such as renaming 100+ files in a folder, a very difficult task. However, renaming 100+ files in a directory can be done in less than a minute with a command entered into the command line.
Text interface with menus

- A text interface can be made easier to navigate using menus created with text and ASCII extended characters. 
For example, many command line text editors have some type of interface with menus and shortcut keys that make 
navigating the file being edited easier.



Name a Python library that you would use in order to pass arguments from the command line.
import os
class shell_cmd(cmd.Cmd,object):
    def do_shell(self, s):
        os.system(s)
    def help_shell(self):
        print "execute shell commands"

shell.py





Exercise 2 - Creating and executing a command line program
Write a Python program that gets two numbers from the user and displays the sum of the two numbers. Make sure to make this program a .py file, something you can run from the command line.
Note:
You can use the %%writeline magic command in Jupyter to create this file, or you can simply use an external editor to create this file. Please refer to classwork in Github for examples.
In [ ]:
def sum(x,y):
    ans = x+y
    return x+y
    

def avg(x,y):
    avge = sum(x,y)/2
    average = int(avge)
    print("Sum of the given two numbers is:", sum(x,y))
    print("Average of the given numbers is:", average)    
    
num1 = int(input("Enter first number:"))
a = num1
num2 = int(input("Enter second number:"))
b = num2

sum(a,b)
avg(a,b)

avgenum.py







Exercise 3 - Accepting arguments from the command line
Repeat the command line program above, however, this time, instead of accepting the numbers from the user using raw_input, pass in the two numbers as command line arguments.
Note You can use sys.argv or argparse, whichever you are more comfortable with.
In [ ]:
def sum(x,y):
    ans = x+y
    return x+y
    

def avg(x,y):
    avge = sum(x,y)/2
    average = int(avge)
    print("Sum of the given two numbers is:10", sum(x,y))
    print("Average of the given numbers is:20", average)    
    
num1 = int(input("Enter first number:10"))
a = num1
num2 = int(input("Enter second number:20"))
b = num2

sum(a,b)
avg(a,b)


   
### END CODE
Exercise 4 - Command Line programs with multiple modules
This is also an extension to Exercises 2 and 3.
Write a Python program to add two numbers. Your Python program must have a function called add that is placed in a separate module called helper.py. Your main program, which is also a standalone Python program main.py must import helper.py and use this module to add the two numbers.
The numbers to be added must be passed via the command line.
Here is an example of how your program would be invoked assuming the numbers to be added are 3 and 2
python main.py 3 2
In [ ]:

python main.py 3.2

num1 = 1.5

num2 = 6.3



# Add two numbers

sum = float(num1) + float(num2)



# Display the sum

print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))











### END CODE
Exercise 5 - Python program with multiple modules to sort a list of numbers
Write a Python program to sort a list of numbers in ascending order. Your Python program must have a function called sortNumbers that is placed in a separate module called sorthelper.py. This function sortNumbers accepts a list of numbers. Your main program, which is also a standalone Python program main.py must import sorthelper.py and use this module to sort the numbers.
The numbers to be sorted must be passed via the command line.
Here is an example of how your program would be invoked assuming the numbers to be sorted are 5 4 3 and 8
python main.py 5 4 3 8
In [ ]:

python main.py 5 4 3 8

data_list = [3,4,5,8]
new_list = [0,0,0,0]

while data_list:
    minimum = data_list[4]  # arbitrary number in list 
    for x in data_list: 
        if x < minimum:
            minimum = x
    sort#s()
    new_list.append(minimum)
    data_list.remove(minimum)    

print new_list
















